import {Form, Question, QuestionConf, QuestionType, QuestionTypeWithChoices, ShowIfCondition} from '../../core/v1/Form'
import {EN_UK_Label, Utils} from '../../core/Utils'

export class Common {

  static readonly agencyReferredTo = (k: Form<EN_UK_Label>, label = {en: 'Agency referred to', uk: '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ, –Ω–∞ —è–∫–µ –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è'}) => {
    return k.questionWithChoicesAndSpecify('RADIO', label, [
      {label: {en: 'Alight', uk: 'Alight'}},
      {label: {en: 'CLEAR Global', uk: 'CLEAR Global'}},
      {label: {en: 'Helsinki Foundation for Human Rights', uk: 'Helsinki Foundation for Human Rights'}},
      {label: {en: 'ICRC', uk: 'ICRC'}},
      {label: {en: 'INTERSOS', uk: 'INTERSOS'}},
      {label: {en: 'IOM', uk: 'IOM'}},
      {label: {en: 'International Rescue Committee', uk: 'International Rescue Committee'}},
      {label: {en: 'Loop', uk: 'Loop'}},
      {label: {en: 'M√©decins du Monde', uk: 'M√©decins du Monde'}},
      {label: {en: 'MSF', uk: 'MSF'}},
      {label: {en: 'NRC', uk: 'NRC'}},
      {label: {en: 'Oxfam', uk: 'Oxfam'}},
      {label: {en: 'Plan International', uk: 'Plan International'}},
      {label: {en: 'Polish Red Cross', uk: 'Polish Red Cross'}},
      {label: {en: 'Red Pencil', uk: 'Red Pencil'}},
      {label: {en: 'Save the Children', uk: 'Save the Children'}},
      {label: {en: 'Terre Des Hommes', uk: 'Terre Des Hommes'}},
      {label: {en: 'The Polish Center for International Aid (PCPM)', uk: 'The Polish Center for International Aid (PCPM)'}},
      {label: {en: 'UNHCR', uk: 'UNHCR'}},
      {label: {en: 'UNICEF', uk: 'UNICEF'}},
      {label: {en: 'Other (specify)', uk: '—ñ–Ω—à–∞ (—É—Ç–æ—á–Ω—ñ—Ç—å)'}, specify: true}
    ])
  }

  static readonly levelOfRisk = (k: Form<{en: string, uk: string}>, label = {en: 'Level of risk', uk: '–†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É'}) => {
    return k.questionWithChoices('RADIO', label, [
      {en: 'Emergency', uk: '–ù–∞–¥–∑–≤–∏—á–∞–π–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è'},
      {en: 'Urgent', uk: '—Ç–µ—Ä–º—ñ–Ω–æ–≤–∏–π'},
      {en: 'Normal', uk: '–ù–æ—Ä–º–∞–ª—å–Ω–∏–π'},
    ])
  }

  static readonly serviceRequested = (k: Form<EN_UK_Label>, label = {en: 'Service requested', uk: '–ó–∞–ø–∏—Ç –Ω–∞ –ø–æ—Å–ª—É–≥–∏'}, conf?: QuestionConf<EN_UK_Label>) => {
    return k.questionWithChoicesAndSpecify('CHECKBOX', label, [
      {en: 'Psychosocial support and Mental Health', uk: '–ü—Å–∏—Ö–æ—Å–æ—Ü—ñ–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ –ø—Å–∏—Ö—ñ—á–Ω–µ –∑–¥–æ—Ä–æ–≤\'—è'},
      {en: 'Child protection services', uk: '–°–ª—É–∂–±–∏ –∑–∞—Ö–∏—Å—Ç—É –¥—ñ—Ç–µ–π'},
      {en: 'Family tracing / Reunification', uk: '–†–æ–∑—à—É–∫ —Å—ñ–º\'—ó / –í–æ–∑–∑\'—î–¥–Ω–∞–Ω–Ω—è'},
      {en: 'Protection - Specialized services', uk: '–û—Ö–æ—Ä–æ–Ω–∞ - –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏'},
      {en: 'Material assistance / NFIs', uk: '–ú–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ / –ù–§–û'},
      {en: 'Legal aid', uk: '–Æ—Ä–∏–¥–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞'},
      {en: 'Registration', uk: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'},
      {en: 'Accommodation', uk: '–ü—Ä–æ–∂–∏–≤–∞–Ω–Ω—è'},
      {en: 'Medical / Nutrition', uk: '–ú–µ–¥–∏—Ü–∏–Ω–∞ / –•–∞—Ä—á—É–≤–∞–Ω–Ω—è'},
      {en: 'Cash assistance', uk: '–ì—Ä–æ—à–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞'},
      {en: 'Food assistance', uk: '–•–∞—Ä—á–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞'},
      {en: 'Mobility support', uk: '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –º–æ–±—ñ–ª—å–Ω–æ—Å—Ç—ñ'},
      {en: 'Education / Vocational training', uk: '–û—Å–≤—ñ—Ç–∞ / –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞'},
      {label: {en: 'Other (specify)', uk: '—ñ–Ω—à–∞ (—É—Ç–æ—á–Ω—ñ—Ç—å)'}, specify: true},
    ], conf)
  }

  static readonly staffCode = (k: Form<EN_UK_Label>, label = {en: 'Staff code', uk: '–∫–æ–¥ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞'}, conf?: QuestionConf<EN_UK_Label>) => {
    return k.question('TEXT', label, {
      constraint: `regex(., '${Utils.regexp.staffCode}')`,
      constraintMessage: 'Invalid staff code'
    })
  }
  // static readonly staffCode = (k: Form<EN_UK_Label, label = 'Staff code', conf?: QuestionConf) => {
  //   return k.questionWithChoices('RADIO', label, [
  //     'OLHUSUPR22',
  //     'NASZPSPR22',
  //     'IRRAPSPR22',
  //     'JUPISOPR22',
  //     'ANZUPSPR22',
  //     'MABISOPR22',
  //     'DAIVSOPR22',
  //     'ANINPSPR22',
  //     'YUNASOPR22',
  //     'YUOHSOPR22',
  //     'OKOHSOPR22',
  //     'JABRHEPR22',
  //     'NAKOPSPR22',
  //     'ALSISOPR22',
  //     'OLLESOPR22',
  //   ], conf)
  // }

  static readonly today = (k: Form<EN_UK_Label>, label = {en: 'Date', uk: '–î–∞—Ç–∞'}, conf?: QuestionConf<EN_UK_Label>) => {
    return k.question('DATE', label, {
      default: 'today()',
      ...conf,
    })
  }
  static readonly contactDetails = (k: Form<EN_UK_Label>) => {
    return [
      k.phone({en: 'üìû WhatsApp', uk: 'üìû WhatsApp'}),
      k.phone({en: 'üìû Polish phone number', uk: 'üìû –ü–æ–ª—å—Å—å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É'}),
      k.email({en: '‚úâÔ∏è Email', uk: '‚úâÔ∏è –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞'}),
      k.question('TEXT', {en: 'üè† Current address', uk: 'üè† –ü–æ—Ç–æ—á–Ω–∞ –∞–¥—Ä–µ—Å–∞'}),
    ]
  }

  static readonly status = (
    k: Form<EN_UK_Label>,
    type: QuestionTypeWithChoices = 'CHECKBOX',
    label = {en: 'Status', uk: '–°—Ç–∞—Ç—É—Å'},
    conf?: QuestionConf<EN_UK_Label>
  ) => k.questionWithChoices(type, label, [
    {en: 'Ukrainian refugee', uk: '–±—ñ–∂–µ–Ω–µ—Ü—å –∑ –£–∫—Ä–∞—ó–Ω–∏'},
    {en: 'Third-country national', uk: '–ì—Ä–æ–º–∞–¥—è–Ω–∏–Ω —Ç—Ä–µ—Ç—å–æ—ó –∫—Ä–∞—ó–Ω–∏'},
    {en: 'Ukrainian volunteer', uk: '–≤–æ–ª–æ–Ω—Ç–µ—Ä –∑ –£–∫—Ä–∞—ó–Ω–∏'},
    {en: 'International volunteer', uk: '–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –≤–æ–ª–æ–Ω—Ç–µ—Ä'},
    {en: 'Host community', uk: '–ü—Ä–∏–π–º–∞—é—á–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∞'},
  ], conf)

  // static readonly lstatus = (k: Form) => k.questionWithChoices('RADIO', 'Legal status', ['Refugee', 'Asylum seeker', 'Polish citizeen'])

  static readonly gender = (k: Form<EN_UK_Label>, label = {en: 'Gender', uk: '–°—Ç–∞—Ç—å'}, conf?: QuestionConf<EN_UK_Label>) => k.questionWithChoices('RADIO', label, [
    {en: 'Female', uk: '–∂—ñ–Ω–æ—á–∞'},
    {en: 'Male', uk: '—á–æ–ª–æ–≤—ñ—á–∞'},
    {en: 'Other', uk: '–Ü–Ω—à–∏–π'},
  ], conf)

  static readonly age = (k: Form<EN_UK_Label>, label = {en: 'Age', uk: '–í—ñ–∫'}, conf?: QuestionConf<EN_UK_Label>) => k.question('INTEGER', label, conf)

  static readonly ageRange = (k: Form<EN_UK_Label>, label = {en: 'Age', uk: '–í—ñ–∫'}, conf?: QuestionConf<EN_UK_Label>) => k.questionWithChoices('RADIO', label, [
    {en: '0-4 years old', uk: ''},
    {en: '5-11 years old', uk: ''},
    {en: '12-17 years old', uk: ''},
    {en: '18-59 years old', uk: ''},
    {en: '60+ years old', uk: ''},
  ])

  static readonly nationalitiesAndSpecify = (k: Form<EN_UK_Label>,
    label = {en: 'Nationality', uk: '–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å'},
    conf?: QuestionConf<EN_UK_Label>) => k.questionWithChoicesAndSpecify('CHECKBOX', label, [
    {label: {en: 'Ukrainian', uk: '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π'}},
    {label: {en: 'Not willing to disclose', uk: '–Ω–µ –±–∞–∂–∞—î —Ä–æ–∑–≥–æ–ª–æ—à—É–≤–∞—Ç–∏'}},
    {label: {en: 'Other (specify)', uk: '—ñ–Ω—à–∞ (—É—Ç–æ—á–Ω—ñ—Ç—å)'}, specify: true},
    // FIXME(Alex) Should use name
  ], {default: 'Ukrainian', ...conf})

  static readonly polishBase = (k: Form<EN_UK_Label>, label = {en: 'Location', uk: '–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è'}, conf?: QuestionConf<EN_UK_Label>): Question<EN_UK_Label>[] => {
    const location = k.questionWithChoices('RADIO', label, [
      {en: 'Warsaw', uk: '–í–∞—Ä—à–∞–≤–∞'},
      {en: 'Krakow', uk: '–ö—Ä–∞–∫—ñ–≤'},
      {en: 'Rzeszow', uk: '–ñ–µ—à—É–≤'},
      {en: 'Lublin', uk: '–õ—é–±–ª—ñ–Ω'},
      {en: 'Chelm', uk: '–•–µ–ª–º'},
    ], conf)

    const buildQuestion = (ifLabel: string, options: EN_UK_Label[]): Question<EN_UK_Label> => {
      return k.questionWithChoices('RADIO', {en: 'Name of center', uk: '–ù–∞–∑–≤–∞ —Ü–µ–Ω—Ç—Ä—É'}, options, {
        ...conf,
        showIf: [{
          question: location,
          value: ifLabel
        }],
      })
    }
    return [
      location,
      buildQuestion('Warsaw', [
        {en: 'Expo', uk: 'Expo',}, // OK
        {en: 'PESEL registration centre', uk: 'PESEL registration centre',},//OK
        {en: 'Warsaw 1', uk: 'Warsaw 1',},
        {en: 'Warsaw 2 ‚Äì Warta Towers', uk: 'Warsaw 2 ‚Äì Warta Towers',},
      ]),
      buildQuestion('Krakow', [
        {en: 'Tauron Arena', uk: 'Tauron Arena'},
        {en: 'Train station', uk: 'Train station'},
      ]),
      buildQuestion('Rzeszow', [
        {en: 'Korczowa', uk: 'Korczowa'},
        {en: 'Medyka', uk: 'Medyka'},
        {en: 'Tesco, Prezmysl', uk: 'Tesco, Prezmysl'},
        {en: 'Boratyn', uk: 'Boratyn'},
        {en: 'Radymno', uk: 'Radymno'},
        {en: 'House of Ukraine', uk: 'House of Ukraine'},
      ]),
      buildQuestion('Lublin', [
        {en: 'Dorohusk', uk: 'Dorohusk'},
        {en: 'Hrebenne', uk: 'Hrebenne'},
        {en: 'Lublin', uk: 'Lublin'},
      ]),
      buildQuestion('Chelm', [
        {en: 'Sports Centre/ Tesco Shop', uk: 'Sports Centre/ Tesco Shop'},
      ]),
    ]
  }

  static readonly specificNeedsHCR = (k: Form<EN_UK_Label>) => {
    const snIdentified = k.questionWithChoices('RADIO', {en: 'Specific needs identified within the family', uk: '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –æ—Å–æ–±–ª–∏–≤—ñ –ø–æ—Ç—Ä–µ–±–∏ –≤ —Ä–æ–¥–∏–Ω–∏'}, [
      {en: 'No specific needs (identified)', uk: '–ù–µ–º–∞—î –æ—Å–æ–±–ª–∏–≤–∏—Ö –ø–æ—Ç—Ä–µ–± (–≤–∏—è–≤–ª–µ–Ω–æ)'},
      {en: 'Person with specific needs', uk: '–õ—é–¥–∏–Ω–∞ –∑ –æ—Å–æ–±–ª–∏–≤–∏–º–∏ –ø–æ—Ç—Ä–µ–±–∞–º–∏'},
    ])
    const snCategory = k.questionWithChoices('CHECKBOX', {en: 'Person with specific needs category', uk: '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ—Å–æ–±–∏ –∑ –æ—Å–æ–±–ª–∏–≤–∏–º–∏ –ø–æ—Ç—Ä–µ–±–∞–º–∏'}, [
      {en: 'Children and adolescent at risk', uk: '–¥—ñ—Ç–∏ —Ç–∞ –ø—ñ–¥–ª—ñ—Ç–∫–∏ –∑ –≥—Ä—É–ø–∏ —Ä–∏–∑–∏–∫—É'},
      {en: 'Unaccompanied children', uk: '–î—ñ—Ç–∏ –±–µ–∑ —Å—É–ø—Ä–æ–≤–æ–¥—É'},
      {en: 'Separated children', uk: '–¥—ñ—Ç–∏ —Ä–æ–∑–ª—É—á–µ–Ω—ñ –∑ –±–∞—Ç—å–∫–∞–º–∏/–æ–ø—ñ–∫—É–Ω–∞–º–∏'},
      {en: 'Persons with disabilities', uk: '–æ—Å–æ–±–∏ –∑ —ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—é'},
      {en: 'Persons with serious medical condition', uk: '–æ—Å–æ–±–∏ –∑ —Å–µ—Ä–π–æ–∑–Ω–∏–º–∏ –º–µ–¥–∏—á–Ω–∏–º–∏  –ø–æ—Ç—Ä–µ–±–∞–º–∏'},
      {en: 'Older persons at risk (60+ years old)', uk: '–õ—ñ—Ç–Ω—ñ –ª—é–¥–∏ –∑ –≥—Ä—É–ø–∏ —Ä–∏–∑–∏–∫—É (60+ —Ä–æ–∫—ñ–≤)'},
      {en: 'Women and girls at risk', uk: '–∂—ñ–Ω–∫–∏ —Ç–∞ –¥—ñ–≤—á–∞—Ç–∞ –∑ –≥—Ä—É–ø–∏ —Ä–∏–∑–∏–∫—É'},
      {en: 'Survivors of violence or torture', uk: '–õ—é–¥–∏, —è–∫—ñ –ø–µ—Ä–µ–∂–∏–ª–∏ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–æ –∞–±–æ —Ç–æ—Ä—Ç—É—Ä–∏'},
      {en: 'People with legal and physical protection needs', uk: '–õ—é–¥–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø—Ä–∞–≤–æ–≤–æ–≥–æ —Ç–∞ —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ –∑–∞—Ö–∏—Å—Ç—É'},
      {en: 'No legal documentation', uk: '–ñ–æ–¥–Ω–æ—ó —é—Ä–∏–¥–∏—á–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó'},
      {en: 'Stateless persons', uk: '–û—Å–æ–±–∏ –±–µ–∑ –≥—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–∞'},
    ], {showIf: [{question: snIdentified, value: 'Person with specific needs'}]})
    return [
      snIdentified,
      snCategory,
    ]
  }

  static readonly specificNeedsRomane = (k: Form) => {
    const options = [
      'Older person at risk',
      'Disability',
      'Serious medical condition',
      'Child at risk',
      'Woman at risk',
      'Single parent or caregiver',
      'Family unity',
      'Legal and Physical Protection Needs',
      'Torture',
      'GBV',
    ]

    const sn = k.questionWithChoices('CHECKBOX', `Specifics needs`, options)

    const showIf = (opt: string): ShowIfCondition<string>[] => {
      return [{
        question: sn,
        value: opt
      }]
    }

    return [
      sn,
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'Single older person (ER-NF)',
        'Older person unable to care for self (ER-FR)',
        'Older person headed household supporting children (ER-MC/SP-GP)',
      ], {showIf: showIf('Older person at risk')}),
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'Physical disability (DS-PM/DS-PS)',
        'Mental disability (DS-MM/DS-MS)',
        'Visual impairment (DS-BD)',
        'Hearing impairment (DS-DF)',
        'Speech impairment (DS-SD)',
      ], {showIf: showIf('Disability')}),
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'Chronic illness (SM-CI)',
        'Mental illness (SM-MI)',
        'Addiction (SM-AD)',
        'Life-threatening medical condition (SM-CC)',
        'Malnutrition (SM-MN)',
        'Difficult pregnancy (SM-DP)',
      ], {showIf: showIf('Serious medical condition')}),
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'Separated child (SC-SC)',
        'Unaccompanied child (SC-UC)',
        'Child-headed household (SC-CH)',
        'Child in institutional care (SC-IC)',
        'Child in foster care (SC-FC)',
        'Teenage pregnancy (CR-TP)',
        'Child parent (CR-CP)',
        'Child spouse (CR-CS)',
        'Child carer (CR-CC)',
        'Child at risk of not attending school (CR-NE)',
        'Child with special education needs (CR-SE)',
        'Child engaged in labour (CR-LO/CR-LW)',
        'Child associated with armed forces or groups (CR-AF)',
        'Child in conflict with the law (CR-CL)',
      ], {showIf: showIf('Child at risk')}),
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'Single woman at risk (WR-SF)',
        'Lactation (WR-LC)',
      ], {showIf: showIf('Woman at risk')}),
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'Single parent (SP-PT)',
        'Single caregiver (SP-CG)',
      ], {showIf: showIf('Single parent or caregiver')}),
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'Tracing required (FU-TR)',
        'Family reunification required (FU-FR)',
      ], {showIf: showIf('Family unity')}),
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'No legal documentation (LP-ND)',
        'Unmet basic needs (LP-BN)',
        'No access to services (LP-NA)',
        'Mixed marriage (LP-MM)',
        'Multiple displacements (LP-MD)',
        'Violence, abuse or neglect (LP-AN)',
        'Marginalized from society or community (LP-MS)',
        'Criminal record (LP-CR)',
      ], {showIf: showIf('Legal and Physical Protection Needs')}),
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'Psychological and/or physical impairment due to torture (TR-PI)',
        'Witness of violence to other (TR-WV)',
      ], {showIf: showIf('Torture')}),
      k.questionWithChoices('CHECKBOX', `Specifics needs`, [
        'Survivor of GBV (SV)',
      ], {showIf: showIf('GBV')}),
    ]
  }
}
